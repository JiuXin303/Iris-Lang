on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y clang ninja-build cmake build-essential

    - name: Build on Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p ${{github.workspace}}/build
        cd ${{github.workspace}}/build
        cmake .. \
          -DCMAKE_C_COMPILER=clang \
          -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_TESTING=ON \
          -G Ninja
        cmake --build . --config Release

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install -y llvm ninja cmake

    - name: Build on Windows
      if: matrix.os == 'windows-latest'
      run: |
        mkdir ${{github.workspace}}\build
        cd ${{github.workspace}}\build
        cmake .. `
          -DCMAKE_C_COMPILER=clang-cl `
          -DCMAKE_CXX_COMPILER=clang-cl `
          -DCMAKE_BUILD_TYPE=Release `
          -DBUILD_TESTING=ON `
          -G Ninja
        cmake --build . --config Release

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install llvm ninja cmake

    - name: Build on macOS
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p ${{github.workspace}}/build
        cd ${{github.workspace}}/build
        cmake .. \
          -DCMAKE_C_COMPILER=clang \
          -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_TESTING=ON \
          -G Ninja
        cmake --build . --config Release